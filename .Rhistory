engine = "kknn"
)
set.seed(123)
knn_wf <-
workflow() %>%
add_model(knn_model) %>%
add_recipe(model_recipe)
knn_wf
knn_results <-
knn_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
#install.packages("naivebayes")
install.packages("kknn")
library(kknn)
knn_model <-
nearest_neighbor( mode = "classification",
neighbors = tune(),
weight_func = tune(),
dist_power = tune(),
engine = "kknn"
)
set.seed(123)
knn_wf <-
workflow() %>%
add_model(knn_model) %>%
add_recipe(model_recipe)
knn_wf
knn_results <-
knn_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
knn_results %>%
collect_metrics()
param_final <- knn_results %>%
select_best(metric = "accuracy")
param_final
knn_wf <- knn_wf %>%
finalize_workflow(param_final)
knn_wf
knn_fit <- knn_wf %>%
last_fit(heart_split)
test_performance <- knn_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
rf_model <-
rand_forest(mode = "classification",
mtry = tune(),
trees = tune(),
min_n = tune(),
engine = "ranger"
)
set.seed(123)
rf_wf <-
workflow() %>%
add_model(rf_model) %>%
add_recipe(model_recipe)
rf_wf
rf_results <-
rf_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
rf_results %>%
collect_metrics()
param_final <- rf_results %>%
select_best(metric = "accuracy")
param_final
rf_wf <- rf_wf %>%
finalize_workflow(param_final)
rf_wf
rf_fit <- rf_wf %>%
last_fit(heart_split)
test_performance <- rf_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
svm_model <-
svm_rbf(mode = "classification",
cost = tune(),
rbf_sigma = tune(),
engine = "kernlab"
)
set.seed(123)
svm_wf <-
workflow() %>%
add_model(svm_model) %>%
add_recipe(model_recipe)
svm_wf
svm_results <-
svm_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
library(kernlab)
svm_model <-
svm_rbf(mode = "classification",
cost = tune(),
rbf_sigma = tune(),
engine = "kernlab"
)
set.seed(123)
svm_wf <-
workflow() %>%
add_model(svm_model) %>%
add_recipe(model_recipe)
svm_wf
svm_results <-
svm_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
svm_results %>%
collect_metrics()
param_final <- svm_results %>%
select_best(metric = "accuracy")
param_final
svm_wf <- svm_wf %>%
finalize_workflow(param_final)
svm_wf
svm_fit <- svm_wf %>%
last_fit(heart_split)
test_performance <- svm_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
lgbm_model <-
boost_tree( mode = "classification",
mtry = tune(),
trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune(),
engine = "lightgbm"
)
set.seed(123)
lgbm_wf <-
workflow() %>%
add_model(lgbm_model) %>%
add_recipe(model_recipe)
lgbm_wf
lgbm_results <-
lgbm_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
library(lightgbm)
lgbm_model <-
boost_tree( mode = "classification",
mtry = tune(),
trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune(),
engine = "lightgbm"
)
set.seed(123)
lgbm_wf <-
workflow() %>%
add_model(lgbm_model) %>%
add_recipe(model_recipe)
lgbm_wf
lgbm_results <-
lgbm_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
lgbm_results %>%
collect_metrics()
param_final <- lgbm_results %>%
select_best(metric = "accuracy")
param_final
lgbm_wf <- lgbm_wf %>%
finalize_workflow(param_final)
lgbm_wf
lgbm_fit <- lgbm_wf %>%
last_fit(heart_split)
test_performance <- lgbm_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
flexible_model <-
discrim_flexible( mode = "classification",
num_terms = tune(),
prod_degree = tune(),
prune_method = tune(),
engine = "earth"
)
set.seed(123)
flexible_wf <-
workflow() %>%
add_model(flexible_model) %>%
add_recipe(model_recipe)
flexible_wf
flexible_results <-
flexible_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
library(mda)
flexible_model <-
discrim_flexible( mode = "classification",
num_terms = tune(),
prod_degree = tune(),
prune_method = tune(),
engine = "earth"
)
set.seed(123)
flexible_wf <-
workflow() %>%
add_model(flexible_model) %>%
add_recipe(model_recipe)
flexible_wf
flexible_results <-
flexible_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
flexible_results %>%
collect_metrics()
param_final <- flexible_results %>%
select_best(metric = "accuracy")
param_final
flexible_wf <- flexible_wf %>%
finalize_workflow(param_final)
flexible_wf
flexible_fit <- flexible_wf %>%
last_fit(heart_split)
test_performance <- flexible_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
regularized_model <-
discrim_regularized( mode = "classification",
frac_common_cov = tune(),
frac_identity = tune(),
engine = "klaR"
)
set.seed(123)
regularized_wf <-
workflow() %>%
add_model(regularized_model) %>%
add_recipe(model_recipe)
regularized_wf
regularized_results <-
regularized_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
library(klaR)
regularized_model <-
discrim_regularized( mode = "classification",
frac_common_cov = tune(),
frac_identity = tune(),
engine = "klaR"
)
set.seed(123)
regularized_wf <-
workflow() %>%
add_model(regularized_model) %>%
add_recipe(model_recipe)
regularized_wf
regularized_results <-
regularized_wf %>%
tune_grid(resamples = heart_cv,
metrics = metric_set(accuracy)
)
regularized_results %>%
collect_metrics()
param_final <- regularized_results %>%
select_best(metric = "accuracy")
param_final
regularized_wf <- regularized_wf %>%
finalize_workflow(param_final)
regularized_wf
regularized_fit <- regularized_wf %>%
last_fit(heart_split)
test_performance <- regularized_fit %>% collect_predictions()
test_performance
heart_metrics <- metric_set(accuracy, f_meas, precision, recall)
heart_metrics(data = test_performance, truth = HeartDisease, estimate = .pred_class)
conf_mat(test_performance, HeartDisease, .pred_class)
library(tidyverse)
#install.packages("GGally")
library(GGally)
#install.packages("superml")
library(superml)
#install.packages("caret")
library(caret)
#install.packages("Boruta")
library(Boruta)
library(tidymodels)
#install.packages("baguette")
library(baguette)
#install.packages("discrim")
library(discrim)
#install.packages("bonsai")
library(bonsai)
library(xgboost)
library(glmnet)
#install.packages("xgboost")
#install.packages(c("Matrix", "foreach", "glmnet"))
#install.packages("glmnet")
library(naivebayes)
library(kknn)
library(kernlab)
library(lightgbm)
library(mda)
library(klaR)
#install.packages("naivebayes")
#install.packages("kknn")
setwd("~/Downloads/zWTIOyzKTSG0w5jU5Io_Nw_15c1635f70334a3a9d4b1ec2132e14f1_stroke-prediction")
#install.packages("naivebayes")
#install.packages("kknn")
heart <- read_csv("healthcare-dataset-stroke-data.csv")
stroke %>% glimpse()
#install.packages("naivebayes")
#install.packages("kknn")
stroke <- read_csv("healthcare-dataset-stroke-data.csv")
stroke %>% glimpse()
stroke %>% head()
stroke %>% summary()
# from character to factor
stroke <- stroke %>% mutate_if(is.character, as.factor)
stroke %>% summary()
stroke$Age %>% summary()
ggplot(data = stroke, aes(x=age)) +
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "Age Histogram Plot", x="Age", y="Count")+
theme_minimal()
stroke$age %>% summary()
ggplot(data = stroke, aes(x=age)) +
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "Age Histogram Plot", x="Age", y="Count")+
theme_minimal()
ggplot(data = heart, aes(x=gender))+
stat_count(fill="steelblue")+
labs(title = "Gender Bar Plot", x="Gender", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=hypertension))+
stat_count(fill="steelblue")+
labs(title = "Hypertension Bar Plot", x="Hypertension", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=heart_disease))+
stat_count(fill="steelblue")+
labs(title = "Heart Disease Bar Plot", x="Heart Disease", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=ever_married))+
stat_count(fill="steelblue")+
labs(title = "Sex Bar Plot", x="Ever Married", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=work_type))+
stat_count(fill="steelblue")+
labs(title = "Work Type Bar Plot", x="Work Type", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=Residence_type))+
stat_count(fill="steelblue")+
labs(title = "Residence Type Bar Plot", x="Residence Type", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=avg_glucose_level))+
stat_count(fill="steelblue")+
labs(title = "Average Glucose Level Bar Plot", x="Average Glucose Level", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
stat_count(fill="steelblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
stat_count(fill="steelblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = heart, aes(x = age)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Age Box Plot", x = "Age") +
theme_minimal()
ggplot(data = stroke, aes(x = age)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Age Box Plot", x = "Age") +
theme_minimal()
ggplot(data = stroke, aes(x = avg_glucose_level)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Average Glucose Level Box Plot", x = "Avg. Glucose Level") +
theme_minimal()
ggplot(data = stroke, aes(x = age)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Age Box Plot", x = "Age") +
theme_minimal()
ggplot(data = stroke, aes(x = avg_glucose_level)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Average Glucose Level Box Plot", x = "Avg. Glucose Level") +
theme_minimal()
ggplot(data = stroke, aes(x = bmi)) +
geom_boxplot(color = "darkblue", fill = "lightblue") +
labs(title = "Body Mass Index Box Plot", x = "BMI") +
theme_minimal()
ggplot(data = stroke, aes(x=smoking_status))+
stat_count(fill="steelblue")+
labs(title = "Smoking Status Bar Plot", x="Smoking Status", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=avg_glucose_level)) +
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "Average Glucose Level Histogram Plot", x="Avg. Glucose Level", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
stat_count(fill="steelblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi)) +
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "BMI Histogram Plot", x="BMI", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
stat_count(fill="steelblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=stroke)) +
geom_histogram(color= "darkblue", fill="lightblue")+
labs(title = "Stroke Histogram Plot", x="Stroke", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=stroke)) +
stat_count(fill="steelblue")+
labs(title = "Stroke Bar Plot", x="Stroke", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))+
stat_count(fill="steelblue")+
labs(title = "Body Mass Index Bar Plot", x="bmi", y="Count")+
theme_minimal()
ggplot(data = stroke, aes(x=bmi))
stroke %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
everything()
stroke %>% select(everything())
library(dplyr)
stroke %>% select(everything())
#stroke %>% select(everything())
stroke %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
heart %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
heart <- read_csv("./Downloads/heart.csv")
head(heart)
heart %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
ggpairs(heart, title="correlogram with ggpairs()")
heart %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
# from character to factor
heart <- heart %>% mutate_if(is.character, as.factor)
heart %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
stroke %>% select(everything())
stroke %>% select(everything())
scolumns <- stroke %>% select(everything())
scolumns <- select(stroke,everything())
library(tidyverse)
#install.packages("GGally")
library(GGally)
#install.packages("superml")
library(superml)
#install.packages("caret")
library(caret)
#install.packages("Boruta")
library(Boruta)
library(tidymodels)
#install.packages("baguette")
library(baguette)
#install.packages("discrim")
library(discrim)
#install.packages("bonsai")
library(bonsai)
library(xgboost)
library(glmnet)
library(dplyr)
#install.packages("xgboost")
#install.packages(c("Matrix", "foreach", "glmnet"))
#install.packages("glmnet")
library(naivebayes)
library(kknn)
library(kernlab)
library(lightgbm)
library(mda)
library(klaR)
#install.packages("naivebayes")
#install.packages("kknn")
stroke <- read_csv("healthcare-dataset-stroke-data.csv")
stroke %>% glimpse()
stroke %>% head()
stroke %>% summary()
# from character to factor
stroke <- stroke %>% mutate_if(is.character, as.factor)
stroke %>% summary()
scolumns <- select(stroke,everything())
